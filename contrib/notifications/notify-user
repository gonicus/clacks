#!/usr/bin/env python
# -*- coding: utf-8 -*-
import sys
import pynotify
import gobject
import dbus
import dbus.mainloop.glib
import time
from optparse import OptionParser, OptionValueError


class Notify(object):
    __actions = None

    def __init__(self):
        pynotify.init('gosa-ng')
    
    def __callback(self, notification=None, action=None, data=None):
        """
        __callback acts on notification actions, if actions were defined.
        
        """
        self.__res = self.__actions.index(data)
        self.notify.close()
        self.loop.quit()

    def notification_closed(self,*args, **kwargs):
        """
        notification_closed is called whenever a notification is closed.
        If no action was selected from the given ones, then show the 
        notification again. 
        """
        # Is there a valid result selected? If not, then show the dialog again.
        if self .__actions and self.__res == 255:
            try:
                time.sleep(5)
                self.notify.show() 
            except KeyboardInterrupt:
                self.loop.quit()
        else:
            self.loop.quit()
    
    def send(self, title, message, icon="dialog-information",
        urgency=pynotify.URGENCY_NORMAL,
        timeout=pynotify.EXPIRES_DEFAULT, **kwargs):
        """
        send    initiates the notification with the given option details.
        If actions were specified then it hooks in the MainLoop to keep
        the programm running till an action was selected or the programm
        was interrupted.
        """

        # Initially start with result id 0 for non-action notificatiuons
        #  and with 255 for action notifications.
        self.__res = (0 if not 'actions' in kwargs else 255)

        # Build dialog
        self.notify = pynotify.Notification(title, message, icon)

        # Set up actions - here we want an answer, ignore
        # timeout.
        if 'actions' in kwargs:
            timeout = pynotify.EXPIRES_NEVER
            self.__actions = kwargs['actions']
            for action in kwargs['actions']:
                self.notify.add_action(action, action, self.__callback, action)

        # Set notification details
        self.notify.set_timeout(timeout)
        self.notify.set_urgency(urgency)
        self.notify.show()

        # Register provided actions and then hook in the main loop
        if self.__actions:
            dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)

            # Register callback for 'NotificationClosed' event on the dbus.
            bus = dbus.SessionBus()	
            bus.add_signal_receiver(self.notification_closed, 
                dbus_interface="org.freedesktop.Notifications", signal_name="NotificationClosed")

            # Hook in the main loop, to keep the programm running till an actoins
            # was selected or the application was closed.
            self.loop = gobject.MainLoop()
            try:
                self.loop.run()
            except KeyboardInterrupt:
                try:
                    self.notify.close()
                except gobject.GError:
                    pass

        return self.__res


def checkUrgency(option, opt, value, parser):
    """
    checkUrgency    checks whether the given value for the urgency option
    is valid or not and then updates the cli-option-parser 
    It defaults to pynotify.URGENCY_NORMAL.
    """

    # Create a dictionary for all valid values.
    attrMap = {};    
    attrMap[None] = pynotify.URGENCY_NORMAL
    attrMap['critical'] = pynotify.URGENCY_CRITICAL
    attrMap['normal'] = pynotify.URGENCY_NORMAL
    attrMap['low'] = pynotify.URGENCY_LOW

    # If a invalid value was specified, then tell the user and default to normal.
    if value not in attrMap:
        raise OptionValueError("Invalid urgency level specified. (critical, normal, low)")
        value = None

    # Update the cli-option-parser now.
    parser.values.urgency = value

if __name__ == '__main__':
    n = Notify()

    # Define cli-script parameters
    parser = OptionParser(description = "Sends a notification dialog "
        "to a user on the local machine.", 
        prog = "notify", usage = "%prog <message> <title> [options] ")

    parser.add_option("-l", "--urgency", type="string", help="Urgency level", 
        callback=checkUrgency, action="callback", default=pynotify.URGENCY_NORMAL)
    parser.add_option("-i", "--icon", dest="icon", 
        help="An icon file to use in the notifcation", metavar="FILE")
    parser.add_option("-t", "--timeout", dest="timeout", 
        help="Milliseconds the notification is displayed")
    parser.add_option("-a", "--actions", dest="actions", 
        help="A list of actions the notification is displayed. E.g. -a 'yes,no'")
    parser.add_option("-u", "--user", dest="user", help="The target user")
    parser.add_option("-q", "--quiet", action="store_false", dest="verbose", 
        default=True,help="don't print status messages to stdout")

    # Check if at least 'message' and 'title' are given.
    (options, args) = parser.parse_args()
    if len(args) != 2:
           parser.print_help() 
    else:
        actions = []
        if options.actions:
            actions = options.actions.split(',');

        # Check if actions and timeout are given, timeout will be ignored in this case.
        if options.actions and options.timeout and options.verbose:
            print "The options 'timeout' and 'actions' cannot be combined, timeout will be ingored!"

        # Ensure that the timeout is valid
        if options.timeout:
            options.timeout = int(options.timeout)
        else:
            options.timeout = pynotify.EXPIRES_DEFAULT

        sys.exit(n.send(args[0], args[1], actions=actions, icon=options.icon, 
            urgency=options.urgency, timeout=options.timeout))


###############################################
# Usecases:
#
# 1) Simple Nachricht
#    Timeout, Titel, Nachricht (HTML), Icon, Urgency (low, normal, critical)
#
#    Timeout:
#    EXPIRES_DEFAULT = -1
#    EXPIRES_NEVER = 0
#
#    Urgency:
#    URGENCY_CRITICAL
#    URGENCY_LOW
#    URGENCY_NORMAL
#
#    Icon (z.B.):
#    dialog-information
#    dialog-warning
#    dialog-error
#    dialog-question
#
# 2) Nachricht mit Callbacks
#    Timeout (mandatory), Titel, Nachricht (HTML), Icon, Urgency (low, normal, critical)
#    "Button 1", "Button 2", ...
#
#    -> wartet auf bestÃ¤tigung, max. timeout -> -1
