#!/usr/bin/env python
# -*- coding: utf-8 -*-
import sys
import pynotify
import gobject
import dbus
import dbus.mainloop.glib
from optparse import OptionParser, OptionValueError


class Notify(object):
    __actions = None

    def __init__(self):
        pynotify.init('gosa-ng')

    def __callback(self, notification=None, action=None, data=None):
        self.__res = self.__actions.index(data)
        self.loop.quit()

    def notification_closed(self,*args, **kwargs):
        self.loop.quit()
        print "Closed"
        
    
    def send(self, title, message, icon="dialog-information",
        urgency=pynotify.URGENCY_NORMAL,
        timeout=pynotify.EXPIRES_DEFAULT, **kwargs):

        self.__res = 0

        # Build dialog
        notify = pynotify.Notification(title, message, icon)

        # Set up actions - here we want an answer, ignore
        # timeout.
        if 'actions' in kwargs:
            timeout = pynotify.EXPIRES_NEVER
            self.__actions = kwargs['actions']
            for action in kwargs['actions']:
                notify.add_action(action, action, self.__callback, action)

        notify.set_timeout(timeout)
        notify.set_urgency(urgency)
        notify.show()
        self.notify = notify

        if self.__actions:
            dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)
            bus = dbus.SessionBus()	

            #bus.add_signal_receiver(handler, interface_keyword="dbus_interface", member_keyword="member")
            bus.add_signal_receiver(self.notification_closed, dbus_interface="org.freedesktop.Notifications", signal_name="NotificationClosed",
                member_keyword="__member", interface_keyword="__interface")

            self.loop = gobject.MainLoop()
            try:
                self.loop.run()
            except KeyboardInterrupt:
                pass

        return self.__res


# Check the urgency level.
def checkUrgency(option, opt, value, parser):

    attrMap = {};    
    attrMap[None] = pynotify.URGENCY_NORMAL
    attrMap['critical'] = pynotify.URGENCY_CRITICAL
    attrMap['normal'] = pynotify.URGENCY_NORMAL
    attrMap['low'] = pynotify.URGENCY_LOW

    if value not in attrMap:
        raise OptionValueError("Invalid urgency level specified. (critical, normal, low)")
        value = None

    parser.values.urgency = value

if __name__ == '__main__':
    n = Notify()

    # Define script parameters
    parser = OptionParser()
    # parser.add_option("-l", "--urgency", type="string", dest="urgency", help="Urgency level", 
    # callback=checkUrgency, action="callback")
    parser.add_option("-l", "--urgency", type="string", help="Urgency level", 
        callback=checkUrgency, action="callback", default=pynotify.URGENCY_NORMAL)
    parser.add_option("-i", "--icon", dest="icon", 
        help="An icon file to use in the notifcation", metavar="FILE")
    parser.add_option("-t", "--timeout", dest="timeout", 
        help="Milliseconds the notification is displayed")
    parser.add_option("-a", "--actions", dest="actions", 
        help="A list of actions the notification is displayed. E.g. -a 'yes,no'")
    parser.add_option("-u", "--user", dest="user", help="The target user")
    parser.add_option("-q", "--quiet", action="store_false", dest="verbose", 
        default=True,help="don't print status messages to stdout")

    (options, args) = parser.parse_args()

    if len(args) != 2:
        print 'Please specify at least a title and a message!'
    else:
        actions = []
        if options.actions:
            actions = options.actions.split(',');

        # Check if actions and timeout are given, timeout will be ignored in this case.
        if options.actions and options.timeout and options.verbose:
            print "The options 'timeout' and 'actions' cannot be combined, timeout will be ingored!"

        # Ensure that the timeout is valid
        if options.timeout:
            options.timeout = int(options.timeout)
        else:
            options.timeout = pynotify.EXPIRES_DEFAULT

        sys.exit(n.send(args[0], args[1], actions=actions, icon=options.icon, 
            urgency=options.urgency, timeout=options.timeout))


###############################################
# Usecases:
#
# 1) Simple Nachricht
#    Timeout, Titel, Nachricht (HTML), Icon, Urgency (low, normal, critical)
#
#    Timeout:
#    EXPIRES_DEFAULT = -1
#    EXPIRES_NEVER = 0
#
#    Urgency:
#    URGENCY_CRITICAL
#    URGENCY_LOW
#    URGENCY_NORMAL
#
#    Icon (z.B.):
#    dialog-information
#    dialog-warning
#    dialog-error
#    dialog-question
#
# 2) Nachricht mit Callbacks
#    Timeout (mandatory), Titel, Nachricht (HTML), Icon, Urgency (low, normal, critical)
#    "Button 1", "Button 2", ...
#
#    -> wartet auf bestÃ¤tigung, max. timeout -> -1
