GOsa NG Development
===================

This document contains information on "how to get started" with
the current gosa-ng snapshot. It does not care about SSL or other
security related issues around qpid.

It works starting with squeeze. Lenny does not work, so
you just don't have to try...


1) Add qpid repository

# wget -O - http://apt.naasa.net/archive.key | apt-key add -
# [ -d /etc/apt/sources.d ] || mkdir /etc/apt/sources.d
# echo "deb http://apt.naasa.net/debian/ lenny main" > /etc/apt/sources.d/qpid.list
# apt-get update


2) Install qpid broker and clients

# apt-get install qpid-broker qpid-client qpid-utils qpid-specs

Add a user for playing with the current development snapshot:

# saslpasswd2 -f /var/lib/qpidd/qpidd.sasldb -u QPID admin

Maybe set the access policy for the admin. Not directly needed for non-production,
but a definitive must on ordinary systems:

# vi /etc/qpid/qpidd.policy
|# Admin is allowed to do everything
|acl allow admin all
|
|# Deny everything else by default
|acl allow all deny
|:wq

Check if it works:

# qpid-config -a admin/secret@hostname queues

Now the broker aka bus is up and running on the host.


For production use, you should enable SSL for the broker and for GOsa core. Generating
the certificates is shown here:

http://rajith.2rlabs.com/2010/03/01/apache-qpid-securing-connections-with-ssl/


2.1) Broker LDAP-Authentication

/etc/default/saslauthd --------------------------------------------------------
#
# Settings for saslauthd daemon
# Please read /usr/share/doc/sasl2-bin/README.Debian for details.
#

# Should saslauthd run automatically on startup? (default: no)
START=yes

# Description of this saslauthd instance. Recommended.
# (suggestion: SASL Authentication Daemon)
DESC="SASL Authentication Daemon"

# Short name of this saslauthd instance. Strongly recommended.
# (suggestion: saslauthd)
NAME="saslauthd"

# Which authentication mechanisms should saslauthd use? (default: pam)
#
# Available options in this Debian package:
# getpwent  -- use the getpwent() library function
# kerberos5 -- use Kerberos 5
# pam       -- use PAM
# rimap     -- use a remote IMAP server
# shadow    -- use the local shadow password file
# sasldb    -- use the local sasldb database file
# ldap      -- use LDAP (configuration is in /etc/saslauthd.conf)
#
# Only one option may be used at a time. See the saslauthd man page
# for more information.
#
# Example: MECHANISMS="pam"
MECHANISMS="ldap"

# Additional options for this mechanism. (default: none)
# See the saslauthd man page for information about mech-specific options.
MECH_OPTIONS=""

# How many saslauthd processes should we run? (default: 5)
# A value of 0 will fork a new process for each connection.
THREADS=5

# Other options (default: -c -m /var/run/saslauthd)
# Note: You MUST specify the -m option or saslauthd won't run!
#
# WARNING: DO NOT SPECIFY THE -d OPTION.
# The -d option will cause saslauthd to run in the foreground instead of as
# a daemon. This will PREVENT YOUR SYSTEM FROM BOOTING PROPERLY. If you wish
# to run saslauthd in debug mode, please run it by hand to be safe.
#
# See /usr/share/doc/sasl2-bin/README.Debian for Debian-specific information.
# See the saslauthd man page and the output of 'saslauthd -h' for general
# information about these options.
#
# Example for postfix users: "-c -m /var/spool/postfix/var/run/saslauthd"
OPTIONS="-c -m /var/run/saslauthd"


/etc/saslauthd.conf -----------------------------------------------------------
ldap_servers: ldap://ldap.your.domain
ldap_search_base: dc=example,dc=com
ldap_filter: (|(&(objectClass=gosaAccount)(uid=%U))(&(objectClass=registeredDevice)(deviceUUID=%U)))
ldap_scope: sub
ldap_size_limit: 0
ldap_time_limit: 15
ldap_timeout: 15
ldap_version: 3
ldap_debug: 255


Test:

# /etc/init.d/saslauthd restart
# testsaslauthd -u admin -p secret -r QPID


/etc/qpid/sasl/qpidd.conf -----------------------------------------------------
pwcheck_method: saslauthd
mech_list: PLAIN LOGIN

# adduser qpidd sasl
# /etc/init.d/qpid-broker restart


2.2) Prepare DNS-Zone for zeroconf

8<-----------------------------------------------------------------------------
; Zeroconf base setup
b._dns-sd._udp  IN PTR @   ;  b = browse domain
lb._dns-sd._udp IN PTR @   ;  lb = legacy browse domain
r._dns-sd._udp  IN PTR @   ;  r = registration domain

; Zeroconf gosa-ng records
_gosa._tcp  PTR GOsa\ NG\ Service._gosa._tcp
GOsa\ NG\ Service._gosa._tcp     SRV 0 0 5671 amqp.example.org.
                                 TXT amqps://amqp.example.org:5671/org.gosa
8<-----------------------------------------------------------------------------

You can test your setup with:

# avahi-browse -D
-> this should list your domain
# avahi-browse -r example.org _gosa._tcp
-> this should list your services


3) Install Python prequisites

While we try to keep everything inside a virtual python environment for
development, some of the python modules need compilation - which rises the
number of required packages drastically. For this reason, just install these
(namely dumbnet, avahi, gtk2, dbus and openssl) packages in your system:

# apt-get install python2.6-dev python-dumbnet python-avahi python-virtualenv \
    libavahi-compat-libdnssd-dev python-openssl python-dbus libssl-dev python-gtk2 \
    python-lxml python-libxml2 python-dmidecode python-ldap python-cjson \
    python-nose python-kid python-coverage

On Windows systems you need the pywin32 package:
http://sourceforge.net/projects/pywin32/


4) Setup a virtual environment for playing with gosa-ng

As a non-root user, initialize the virtual environment:

# virtualenv --setuptools --python=python2.6  gosa-ng
# cd gosa-ng
# source bin/activate

(!) The "source bin/activate" has to be done every time you work in or with the
    virtual environment. Stuff will fail if you don't do this. If you're asked for
    sudo/root, you're doing something wrong.

To install the current archive:

# easy_install -f http://oss.gonicus.de/pub/gosa/eggs gosa.client

To install from SVN:

# git clone git@labs.intranet.gonicus.de:gosa-ng/gosa-ng.git src
# cd src
# python setup.py install


5) Starting the service

(!) Make sure, you've entered the virtual environment using "source bin/activate"
    from inside the gosa-ng directory.

Take a look at the gosa.conf present in the src/gosa/agent directory and adapt it
to your needs. Fire up the daemon in foreground mode:

# gosa-agent -f --config=gosa/agent/gosa.conf


6) Using the gosa-shell

Start the shell and send a command:

# gosa-shell
(authenticate as the admin user you've created in qpid's SASL DB)
>>> gosa.help()
>>> gosa.mksmbhash("secret")
>>> <Strg+D>


The shell did not get priorized work in the moment, so the gosa.help() output is
neither sorted, nor grouped by plugins. Much space for improvements.
