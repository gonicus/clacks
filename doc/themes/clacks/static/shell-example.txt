$ clacksh
Searching service provider...
Connected to https://localhost:8080/rpc
Username [devel]: superadmin
Password: 
Clacks infrastructure shell. Use Ctrl+D to exit.


# This is the clacksh - the clacks shell - which allows to interact with
# the clacks-agent in different ways, execute commands, modify objects or
# send notification events to users, execute methods on clients and much
# more.

# The following code examples will show you some basics that will hopefully 
# give you an idea about how to use the clacks-shell.

# Lets start with some simple stuff, print the clacks help which lists 
# all executable commands:

>>> clacks.help()
CORE
====
  addACL(user, base, priority, members, actions, scope, rolename)
    Add a new ACL.

  addACLRole(user, rolename)
    Add new role.

  addACLToRole(user, rolename, priority, actions, scope, use_role)
    Add new acl to an existing role.

  closeObject(ref)
    Close object and remove it from stack

  ...  


# Here is the result of a command execution:
>>> getClients()
{u'2daf7cbf-75c2-4ea3-bfec-606fe9f07051': {
    u'received': 1313159425.0,
    u'name': u'dyn-10'},
 u'eb5e72d4-c53f-4612-81a3-602b14a8da69': {
     u'received': 1313467229.0,
     u'name': u'ws-2'},
 u'4f0dbdaa-05de-4632-bcba-b6fe8a9e2e09': {
     u'received': 1313463859.0,
     u'name': u'dyn-85'}}


# ... and here another that lists all available password methods
>>> listPasswordMethods()
[u'crypt/standard-des', u'crypt/md5', u'crypt/enhanced-des', u'crypt/blowfish']


# You can also use the commands for scripting. Here is a small listing which
# iterates over the list of available clients and prints their names.
>>> c = getClients()
>>> for client in getClients().values():
...     print client['name']
... 
dyn-10
ws-2
dyn-85


# Besides executing commands, the shell is also able to handle objects, here
# for example an user object.
# We iterate through all properties of the object and print those that are not
# empty.
>>> user = openObject('object', "cn=Admin Super,ou=people,dc=example,dc=net")
>>> for attribute in user.get_attributes():
...     if getattr(user, attribute):
...         print "%s: %s" % (attribute, getattr(user, attribute))
... 
uid: superadmin
passwordMethod: crypt/md5
autoDisplayName: True
cn: Admin Super
userPassword: {CRYPT}$1$ALjq5g4j$7dXaoQiSsHf7d.tVrSLmG.
telephoneNumber: [u'142', u'421', u'241']
displayName: Admin Super
sn: Super
givenName: Admin
autoGECOS: True
uidNumber: 1000
autoIDs: True
gidNumber: 1000
gecos: Super Admin,,142,
groupMembership: [u'grp122', u'ganz-tolle-gruppe']
homeDirectory: /home/superadmin


# Lets search the object-index for user objects
>>> res = find({'_type': 'User'}, {'dn': 1, 'uid': 1})
>>> for entry in res:
...     print entry
...
{u'dn': u'cn=Kein Admin,ou=people,dc=example,dc=net', u'_type': u'User', u'uid': [u'nadminn']}
{u'dn': u'cn=AMQP Agent,ou=people,dc=example,dc=net', u'_type': u'User', u'uid': [u'agent']}
{u'dn': u'cn=Robert Tester,ou=people,dc=example,dc=net', u'_type': u'User', u'uid': [u'robert']}
{u'dn': u'cn=Auch Kein Admin,ou=people,dc=example,dc=net', u'_type': u'User', u'uid': [u'dmig']}
{u'dn': u'cn=Beispiel 21 Benutzer 21,ou=people,dc=example,dc=net', u'_type': u'User', u'uid': [u'user21']}
{u'dn': u'cn=System Administrator,ou=people,dc=example,dc=net', u'_type': u'User', u'uid': [u'admin']}
...


# and groups:
>>> res = find({'_type': 'PosixGroup'}, {'dn': 1})
>>> for entry in res:
...     print entry
...
{u'dn': u'cn=acltest,ou=groups,dc=example,dc=net', u'_type': u'PosixGroup'}
{u'dn': u'cn=test-group,ou=groups,dc=example,dc=net', u'_type': u'PosixGroup'}
{u'dn': u'cn=posix-gruppe1,ou=groups,dc=example,dc=net', u'_type': u'PosixGroup'}
...


# We can also create new objects. Here a group
>>> group = openObject('object', "ou=groups,dc=example,dc=net", "PosixGroup")
>>> group.cn = "vertrieb"
>>> group.description = "Vertrieb"
>>> group.commit()


# ... or a user
>>> user = openObject('object', "ou=people,dc=example,dc=net", "User")
>>> user.uid = "frank"
>>> user.sn = "Frink"
>>> user.givenName = "Frank"
>>> user.commit()


# ... and extend objects with additional information sets.
>>> user = openObject('object', "cn=Frank Frink,ou=people,dc=example,dc=net")
>>> user.extend("PosixUser")
>>> user.homeDirectory = "/home/frank"
>>> user.commit()


# Lets check the object index for changes and lets see if we can find our objects
>>> find({'_type': 'User', 'uid': 'frank'}, {'dn': 1, 'uid': 1})
[{u'dn': u'cn=Frank Frink,ou=people,dc=example,dc=net', u'_type': u'User', u'uid': [u'frank']}]


# and groups:
>>> find({'_type': 'PosixGroup', 'cn': 'vertrieb'}, {'dn': 1})
[{u'dn': u'cn=vertrieb,ou=groups,dc=example,dc=net', u'_type': u'PosixGroup'}]


# Here we add the user 'frank' to the group 'Vertrieb'.
# There are two ways to do it, one is to add the user to the group directly.
# Another way is to add the group to the mapped property groupMembership
# of the user object.
>>> group = openObject('object', "cn=vertrieb,ou=groups,dc=example,dc=net")
>>> group.memberUid = ['frank']
>>> group.commit()

# Lets check if the user is really part of the group
>>> user = openObject('object', "cn=Frank Frink,ou=people,dc=example,dc=net")
>>> user.groupMembership
[u'vertrieb']

# We can also add all users to the group "Vertrieb"
>>> res = find({'_type': 'User'}, {'dn': 1, 'uid': 1})
>>> for u in res:
...     if not u['uid'][0] in group.memberUid:
...         group.memberUid.append(u['uid'][0])
... group.commit()


# And, sure, we can remove objects again.
>>> user = openObject('object', "cn=Frank Frink,ou=people,dc=example,dc=net")
>>> user.remove()

>>> group = openObject('object', "cn=vertrieb,ou=groups,dc=example,dc=net")
>>> group.remove()
